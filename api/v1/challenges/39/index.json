{"success": true, "data": {"id": 39, "name": "Le classique: Labyrinthe", "value": 300, "description": "# Le classique: Labyrinthe\r\n\r\nAuthor: Francis Labelle\r\n\r\nDans ce d\u00e9fi, un d\u00e9fi classique de programmation: r\u00e9soudre un labyrinthe! Le serveur g\u00e9n\u00e8re des labyrinthes al\u00e9atoires. Il vous donne une case de d\u00e9part, une case d'arriv\u00e9e et vous devez trouver un chemin qui se rend \u00e0 la destination.\r\n\r\n## Interpr\u00e9ter le labyrinthe\r\nLe serveur vous envoie le labyrinthe sous format texte. Les caract\u00e8res suivants sont utilis\u00e9s:\r\n\r\n```\r\n# Repr\u00e9sente un mur\r\n0 (z\u00e9ro) repr\u00e9sente un espace vide\r\nD repr\u00e9sente la case d\u00e9part\r\nF repr\u00e9sente la case d'arriv\u00e9e\r\n```\r\n\r\n### Exemple de labyrinthe\r\n\r\n```\r\n8\r\n########\r\n#D#000##\r\n#0#F#00#\r\n#00##0##\r\n#0#0000#\r\n#0####0#\r\n#000000#\r\n########\r\n```\r\n\r\n> **NOTE**: La premi\u00e8re case repr\u00e9sente le nombre de lignes du labyrinthe. **Le labyrinthe est toujours carr\u00e9** (nombre de lignes == nombre de colonnes).\r\n\r\n> **NOTE**: Il y aura toujours des murs sur les 4 c\u00f4t\u00e9s du labyrinthe. Les murs sont \"inclus\" dans le labyrinthe qui vous est envoy\u00e9, c'est-\u00e0-dire que les cases de `(0, 0)` \u00e0 `(0, 8)` sont des murs, les cases de `(0, 0)` \u00e0 `(8, 0)` sont des murs, etc.\r\n\r\n### Structure de donn\u00e9es\r\nPour repr\u00e9senter le labyrinthe dans votre code, il vous sera utile d'utiliser une structure de donn\u00e9es qui repr\u00e9sente la position d'une case et si celle-ci peut \u00eatre travers\u00e9e ou non.\r\n\r\nUne fa\u00e7on de faire serait d'utiliser les classes / structures et de cr\u00e9er un objet pour chaque case.\r\n\r\nUne autre fa\u00e7on de faire (encore plus simple dans ce cas-ci) serait d'utiliser simplement un tableau \u00e0 deux dimensions (X et Y). La valeur de chaque entr\u00e9e du tableau serait un bool\u00e9en `True|False` repr\u00e9sentant l'\u00e9tat de la case (traversable ou non).\r\n\r\n```\r\nlabyrinthe[x][y] = True // Vide\r\nlabyrinthe[x][y] = False // Mur\r\n```\r\n\r\n## Pistes de solution\r\n### Backtracking\r\nUne solution simple (mais moins efficace) de r\u00e9soudre de labyrinthe est d'utiliser un algorithme de backtracking qui essaie tous les chemins jusqu'\u00e0 temps qu'il trouve le bon. Si le labyrinthe n'est pas trop gros, l'algorithme pourra trouver une solution en un temps raisonnable.\r\n\r\nAvec une version r\u00e9cursive, on essaie les cases une par une. Si on se retrouve coinc\u00e9, alors on revient \u00e0 la case pr\u00e9c\u00e9dente et on essaie toutes les autres cases qu'on n'a pas encore essay\u00e9es. Si toutes ces cases m\u00e8nent \u00e0 des culs-de-sac, alors on revient \u00e0 l'autre case d'avant, etc.\r\n\r\n### L'algorithme A*\r\nL'algorithme A* (A star) est un algorithme populaire utilis\u00e9 dans des probl\u00e8mes de pathfinding. Il est tr\u00e8s utile \u00e0 conna\u00eetre, car il peut nous donner le chemin le plus court vers la destination recherch\u00e9e.\r\n\r\nPuisque l'algorithme est un peu plus complexe \u00e0 expliquer, je vous laisse le soin de faire vos recherches sur Google pour en apprendre plus!\r\n\r\n## Format de la solution\r\nVous devez envoyer votre solution au serveur selon le format suivant:\r\n\r\n```\r\nNombre de cases du chemin\r\nCase #1\r\nCase #2\r\n...\r\n```\r\n\r\nExemple:\r\n\r\n```\r\n7\r\n1 0\r\n1 1\r\n1 2\r\n2 2\r\n3 2\r\n4 2\r\n4 3\r\n```\r\n\r\nLa case de d\u00e9part et la case d'arriv\u00e9e doivent \u00eatre incluses dans votre r\u00e9ponse.\r\n\r\n> **ATTENTION**: L'axe des Y va de **haut en bas**. Ainsi, dans un labyrinthe de 8 par 8, le coin **en haut \u00e0 gauche** est (0, 0) et le coin **en bas \u00e0 droite** est (8, 8). C'est une convention tr\u00e8s souvent utilis\u00e9e en informatique.\r\n\r\n> **NOTE**: vous pouvez seulement vous d\u00e9placer horizontalement et verticalement. Pas de diagonales!\r\n\r\n> **NOTE**: envoyez votre r\u00e9ponse en un seul appel r\u00e9seau (concat\u00e9nez toutes les lignes de la solution et envoyez la avec un seul `send`).\r\n\r\n\r\nServeur: `nc challenges.unitedctf.ca 3006`", "connection_info": null, "next_id": null, "category": "Programming", "state": "visible", "max_attempts": 0, "type": "standard", "type_data": {"id": "standard", "name": "standard", "templates": {"create": "/plugins/challenges/assets/create.html", "update": "/plugins/challenges/assets/update.html", "view": "/plugins/challenges/assets/view.html"}, "scripts": {"create": "/plugins/challenges/assets/create.js", "update": "/plugins/challenges/assets/update.js", "view": "/plugins/challenges/assets/view.js"}}, "solves": 26, "solved_by_me": false, "attempts": 0, "files": [], "tags": [], "hints": [], "view": "<div class=\"modal-dialog\" role=\"document\">\n\t<div class=\"modal-content\">\n\t\t<div class=\"modal-body\">\n\t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n\t\t\t\t<span aria-hidden=\"true\">&times;</span>\n\t\t\t</button>\n\t\t\t<ul class=\"nav nav-tabs\">\n\t\t\t\t<li class=\"nav-item\">\n\t\t\t\t\t<a class=\"nav-link active\" href=\"#challenge\">Challenge</a>\n\t\t\t\t</li>\n\t\t\t\t\n\t\t\t\t\t<li class=\"nav-item\">\n\t\t\t\t\t\t<a class=\"nav-link challenge-solves\" href=\"#solves\">\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t26 Solves\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t\n\t\t\t</ul>\n\t\t\t<div role=\"tabpanel\">\n\t\t\t\t<div class=\"tab-content\">\n\t\t\t\t\t<div role=\"tabpanel\" class=\"tab-pane fade show active\" id=\"challenge\">\n\t\t\t\t\t\t<h2 class='challenge-name text-center pt-3'>\n\t\t\t\t\t\t\tLe classique: Labyrinthe\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t<h3 class=\"challenge-value text-center\">\n\t\t\t\t\t\t\t300\n\t\t\t\t\t\t</h3>\n\n\t\t\t\t\t\t<div class=\"challenge-tags text-center\">\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<span class=\"challenge-desc\"><h1>Le classique: Labyrinthe</h1>\n<p>Author: Francis Labelle</p>\n<p>Dans ce d\u00e9fi, un d\u00e9fi classique de programmation: r\u00e9soudre un labyrinthe! Le serveur g\u00e9n\u00e8re des labyrinthes al\u00e9atoires. Il vous donne une case de d\u00e9part, une case d'arriv\u00e9e et vous devez trouver un chemin qui se rend \u00e0 la destination.</p>\n<h2>Interpr\u00e9ter le labyrinthe</h2>\n<p>Le serveur vous envoie le labyrinthe sous format texte. Les caract\u00e8res suivants sont utilis\u00e9s:</p>\n<pre><code># Repr\u00e9sente un mur\n0 (z\u00e9ro) repr\u00e9sente un espace vide\nD repr\u00e9sente la case d\u00e9part\nF repr\u00e9sente la case d'arriv\u00e9e\n</code></pre>\n<h3>Exemple de labyrinthe</h3>\n<pre><code>8\n########\n#D#000##\n#0#F#00#\n#00##0##\n#0#0000#\n#0####0#\n#000000#\n########\n</code></pre>\n<blockquote>\n<p><strong>NOTE</strong>: La premi\u00e8re case repr\u00e9sente le nombre de lignes du labyrinthe. <strong>Le labyrinthe est toujours carr\u00e9</strong> (nombre de lignes == nombre de colonnes).</p>\n</blockquote>\n<blockquote>\n<p><strong>NOTE</strong>: Il y aura toujours des murs sur les 4 c\u00f4t\u00e9s du labyrinthe. Les murs sont &quot;inclus&quot; dans le labyrinthe qui vous est envoy\u00e9, c'est-\u00e0-dire que les cases de <code>(0, 0)</code> \u00e0 <code>(0, 8)</code> sont des murs, les cases de <code>(0, 0)</code> \u00e0 <code>(8, 0)</code> sont des murs, etc.</p>\n</blockquote>\n<h3>Structure de donn\u00e9es</h3>\n<p>Pour repr\u00e9senter le labyrinthe dans votre code, il vous sera utile d'utiliser une structure de donn\u00e9es qui repr\u00e9sente la position d'une case et si celle-ci peut \u00eatre travers\u00e9e ou non.</p>\n<p>Une fa\u00e7on de faire serait d'utiliser les classes / structures et de cr\u00e9er un objet pour chaque case.</p>\n<p>Une autre fa\u00e7on de faire (encore plus simple dans ce cas-ci) serait d'utiliser simplement un tableau \u00e0 deux dimensions (X et Y). La valeur de chaque entr\u00e9e du tableau serait un bool\u00e9en <code>True|False</code> repr\u00e9sentant l'\u00e9tat de la case (traversable ou non).</p>\n<pre><code>labyrinthe[x][y] = True // Vide\nlabyrinthe[x][y] = False // Mur\n</code></pre>\n<h2>Pistes de solution</h2>\n<h3>Backtracking</h3>\n<p>Une solution simple (mais moins efficace) de r\u00e9soudre de labyrinthe est d'utiliser un algorithme de backtracking qui essaie tous les chemins jusqu'\u00e0 temps qu'il trouve le bon. Si le labyrinthe n'est pas trop gros, l'algorithme pourra trouver une solution en un temps raisonnable.</p>\n<p>Avec une version r\u00e9cursive, on essaie les cases une par une. Si on se retrouve coinc\u00e9, alors on revient \u00e0 la case pr\u00e9c\u00e9dente et on essaie toutes les autres cases qu'on n'a pas encore essay\u00e9es. Si toutes ces cases m\u00e8nent \u00e0 des culs-de-sac, alors on revient \u00e0 l'autre case d'avant, etc.</p>\n<h3>L'algorithme A*</h3>\n<p>L'algorithme A* (A star) est un algorithme populaire utilis\u00e9 dans des probl\u00e8mes de pathfinding. Il est tr\u00e8s utile \u00e0 conna\u00eetre, car il peut nous donner le chemin le plus court vers la destination recherch\u00e9e.</p>\n<p>Puisque l'algorithme est un peu plus complexe \u00e0 expliquer, je vous laisse le soin de faire vos recherches sur Google pour en apprendre plus!</p>\n<h2>Format de la solution</h2>\n<p>Vous devez envoyer votre solution au serveur selon le format suivant:</p>\n<pre><code>Nombre de cases du chemin\nCase #1\nCase #2\n...\n</code></pre>\n<p>Exemple:</p>\n<pre><code>7\n1 0\n1 1\n1 2\n2 2\n3 2\n4 2\n4 3\n</code></pre>\n<p>La case de d\u00e9part et la case d'arriv\u00e9e doivent \u00eatre incluses dans votre r\u00e9ponse.</p>\n<blockquote>\n<p><strong>ATTENTION</strong>: L'axe des Y va de <strong>haut en bas</strong>. Ainsi, dans un labyrinthe de 8 par 8, le coin <strong>en haut \u00e0 gauche</strong> est (0, 0) et le coin <strong>en bas \u00e0 droite</strong> est (8, 8). C'est une convention tr\u00e8s souvent utilis\u00e9e en informatique.</p>\n</blockquote>\n<blockquote>\n<p><strong>NOTE</strong>: vous pouvez seulement vous d\u00e9placer horizontalement et verticalement. Pas de diagonales!</p>\n</blockquote>\n<blockquote>\n<p><strong>NOTE</strong>: envoyez votre r\u00e9ponse en un seul appel r\u00e9seau (concat\u00e9nez toutes les lignes de la solution et envoyez la avec un seul <code>send</code>).</p>\n</blockquote>\n<p>Serveur: <code>nc challenges.unitedctf.ca 3006</code></p>\n</span>\n\n\t\t\t\t\t\t<span class=\"challenge-connection-info\">\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t<div class=\"challenge-hints hint-row row\">\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"row challenge-files text-center pb-3\">\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t<div class=\"row submit-row\">\n\t\t\t\t\t\t\t<div class=\"col-md-9 form-group\">\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<input id=\"challenge-id\" class=\"challenge-id\" type=\"hidden\" value=\"39\">\n\t\t\t\t\t\t\t\t\t<input id=\"challenge-input\" class=\"challenge-input\" type=\"text\" name=\"answer\" placeholder=\"Flag\"/>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-3 form-group key-submit\">\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<button id=\"challenge-submit\" class=\"challenge-submit\" type=\"submit\">\n\t\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"row notification-row\">\n\t\t\t\t\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\t\t\t\t<div id=\"result-notification\" class=\"alert alert-dismissable text-center w-100\"\n\t\t\t\t\t\t\t\t\t role=\"alert\" style=\"display: none;\">\n\t\t\t\t\t\t\t\t\t<strong id=\"result-message\"></strong>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div role=\"tabpanel\" class=\"tab-pane fade\" id=\"solves\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\t\t\t\t<table class=\"table table-striped text-center\">\n\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<td><b>Name</b>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td><b>Date</b>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t<tbody id=\"challenge-solves-names\">\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>"}}
