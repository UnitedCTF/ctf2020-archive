{"success": true, "data": {"id": 15, "name": "Le lac de shellcode", "value": 300, "description": "Author: @CycleOfTheAbsurd\r\n\r\nComme nous l'avons vu dans le challenge pr\u00e9c\u00e9dent, il est possible d'exploiter un _buffer overflow_ de mani\u00e8re \u00e0 rediriger le flux d'ex\u00e9cution du programme en \u00e9crasant l'adresse de retour d'une fonction. Par contre, il arrive que le code que l'on d\u00e9sire ex\u00e9cuter ne soit pas pr\u00e9sent dans le programme. Il existe quelques techniques pour ex\u00e9cuter des instructions ne se trouvant pas dans le binaire compil\u00e9. Nous utiliserons un [_shellcode_](https://en.wikipedia.org/wiki/Shellcode).\r\n\r\nUn _shellcode_ est un bout de code compil\u00e9 qui est inject\u00e9 dans une section ex\u00e9cutable d'un programme par un attaquant. L'attaquant cherche ensuite \u00e0 rediriger le flux d'ex\u00e9cution pour faire ex\u00e9cuter ce _shellcode_. Le nom provient du fait qu'on l'utilise souvent pour lancer un _shell_, mais il est possible d'effectuer toutes sortes d'op\u00e9rations.\r\n\r\n__Il s'agit d'une technique d'exploitation et non d'une vuln\u00e9rabilit\u00e9.__ Il faut donc qu'une faille soit pr\u00e9sente dans le programme pour que l'on puisse ex\u00e9cuter le _shellcode_. Le simple fait de pouvoir \u00e9crire un _shellcode_ dans un _buffer_ du programme n'est pas une faille en soi.\r\n\r\nD\u00e9fi: Voici un autre programme compil\u00e9 vuln\u00e9rable \u00e0 un d\u00e9bordement de tampon. Vous devez exploiter cette faille pour ex\u00e9cuter un _shellcode_. Votre but est de lire le contenu du fichier `/flag`.\r\n\r\nAfin d'obtenir le flag, vous devrez exploiter ce m\u00eame programme via `challenges.unitedctf.ca:17002`. Utilisez `netcat` pour vous y connecter\r\n\r\n_Note_: Pour ce challenge, nous avons d\u00e9sactiv\u00e9 certaines protections m\u00e9moires dont [NX](https://en.wikipedia.org/wiki/NX_bit#x86). Cette protection, qui est activ\u00e9e par d\u00e9faut pour les programmes compil\u00e9s avec des compilateurs Linux modernes, rend la _stack_ non-ex\u00e9cutable, ce qui prot\u00e8ge sp\u00e9cifiquement contre les attaques par _shellcode_ dans la _stack_.\r\n\r\n\u00c9crire un shellcode par soi-m\u00eame peut \u00eatre complexe et demande une certaine connaissance du langage d'assemblage utilis\u00e9 par l'architecture cibl\u00e9e (x86-64). Pour cette raison, je vous recommande d'adapter un shellcode existant d'une ressource comme [shellstorm](http://shell-storm.org/shellcode/)", "connection_info": null, "next_id": null, "category": "Pwn", "state": "visible", "max_attempts": 0, "type": "standard", "type_data": {"id": "standard", "name": "standard", "templates": {"create": "/plugins/challenges/assets/create.html", "update": "/plugins/challenges/assets/update.html", "view": "/plugins/challenges/assets/view.html"}, "scripts": {"create": "/plugins/challenges/assets/create.js", "update": "/plugins/challenges/assets/update.js", "view": "/plugins/challenges/assets/view.js"}}, "solves": 9, "solved_by_me": false, "attempts": 0, "files": ["/files/24265b67d66421df626a16c50a1ec669/le_lac_public"], "tags": [], "hints": [], "view": "<div class=\"modal-dialog\" role=\"document\">\n\t<div class=\"modal-content\">\n\t\t<div class=\"modal-body\">\n\t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n\t\t\t\t<span aria-hidden=\"true\">&times;</span>\n\t\t\t</button>\n\t\t\t<ul class=\"nav nav-tabs\">\n\t\t\t\t<li class=\"nav-item\">\n\t\t\t\t\t<a class=\"nav-link active\" href=\"#challenge\">Challenge</a>\n\t\t\t\t</li>\n\t\t\t\t\n\t\t\t\t\t<li class=\"nav-item\">\n\t\t\t\t\t\t<a class=\"nav-link challenge-solves\" href=\"#solves\">\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t9 Solves\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t\n\t\t\t</ul>\n\t\t\t<div role=\"tabpanel\">\n\t\t\t\t<div class=\"tab-content\">\n\t\t\t\t\t<div role=\"tabpanel\" class=\"tab-pane fade show active\" id=\"challenge\">\n\t\t\t\t\t\t<h2 class='challenge-name text-center pt-3'>\n\t\t\t\t\t\t\tLe lac de shellcode\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t<h3 class=\"challenge-value text-center\">\n\t\t\t\t\t\t\t300\n\t\t\t\t\t\t</h3>\n\n\t\t\t\t\t\t<div class=\"challenge-tags text-center\">\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<span class=\"challenge-desc\"><p>Author: @CycleOfTheAbsurd</p>\n<p>Comme nous l'avons vu dans le challenge pr\u00e9c\u00e9dent, il est possible d'exploiter un <em>buffer overflow</em> de mani\u00e8re \u00e0 rediriger le flux d'ex\u00e9cution du programme en \u00e9crasant l'adresse de retour d'une fonction. Par contre, il arrive que le code que l'on d\u00e9sire ex\u00e9cuter ne soit pas pr\u00e9sent dans le programme. Il existe quelques techniques pour ex\u00e9cuter des instructions ne se trouvant pas dans le binaire compil\u00e9. Nous utiliserons un <a href=\"https://en.wikipedia.org/wiki/Shellcode\"><em>shellcode</em></a>.</p>\n<p>Un <em>shellcode</em> est un bout de code compil\u00e9 qui est inject\u00e9 dans une section ex\u00e9cutable d'un programme par un attaquant. L'attaquant cherche ensuite \u00e0 rediriger le flux d'ex\u00e9cution pour faire ex\u00e9cuter ce <em>shellcode</em>. Le nom provient du fait qu'on l'utilise souvent pour lancer un <em>shell</em>, mais il est possible d'effectuer toutes sortes d'op\u00e9rations.</p>\n<p><strong>Il s'agit d'une technique d'exploitation et non d'une vuln\u00e9rabilit\u00e9.</strong> Il faut donc qu'une faille soit pr\u00e9sente dans le programme pour que l'on puisse ex\u00e9cuter le <em>shellcode</em>. Le simple fait de pouvoir \u00e9crire un <em>shellcode</em> dans un <em>buffer</em> du programme n'est pas une faille en soi.</p>\n<p>D\u00e9fi: Voici un autre programme compil\u00e9 vuln\u00e9rable \u00e0 un d\u00e9bordement de tampon. Vous devez exploiter cette faille pour ex\u00e9cuter un <em>shellcode</em>. Votre but est de lire le contenu du fichier <code>/flag</code>.</p>\n<p>Afin d'obtenir le flag, vous devrez exploiter ce m\u00eame programme via <code>challenges.unitedctf.ca:17002</code>. Utilisez <code>netcat</code> pour vous y connecter</p>\n<p><em>Note</em>: Pour ce challenge, nous avons d\u00e9sactiv\u00e9 certaines protections m\u00e9moires dont <a href=\"https://en.wikipedia.org/wiki/NX_bit#x86\">NX</a>. Cette protection, qui est activ\u00e9e par d\u00e9faut pour les programmes compil\u00e9s avec des compilateurs Linux modernes, rend la <em>stack</em> non-ex\u00e9cutable, ce qui prot\u00e8ge sp\u00e9cifiquement contre les attaques par <em>shellcode</em> dans la <em>stack</em>.</p>\n<p>\u00c9crire un shellcode par soi-m\u00eame peut \u00eatre complexe et demande une certaine connaissance du langage d'assemblage utilis\u00e9 par l'architecture cibl\u00e9e (x86-64). Pour cette raison, je vous recommande d'adapter un shellcode existant d'une ressource comme <a href=\"http://shell-storm.org/shellcode/\">shellstorm</a></p>\n</span>\n\n\t\t\t\t\t\t<span class=\"challenge-connection-info\">\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t<div class=\"challenge-hints hint-row row\">\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"row challenge-files text-center pb-3\">\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div class='col-md-4 col-sm-4 col-xs-12 file-button-wrapper d-block'>\n\t\t\t\t\t\t\t\t\t<a class='btn btn-info btn-file mb-1 d-inline-block px-2 w-100 text-truncate'\n\t\t\t\t\t\t\t\t\t   href='/files/24265b67d66421df626a16c50a1ec669/le_lac_public'>\n\t\t\t\t\t\t\t\t\t\t<i class=\"fas fa-download\"></i>\n\t\t\t\t\t\t\t\t\t\t<small>\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tle_lac_public\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t</small>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t<div class=\"row submit-row\">\n\t\t\t\t\t\t\t<div class=\"col-md-9 form-group\">\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<input id=\"challenge-id\" class=\"challenge-id\" type=\"hidden\" value=\"15\">\n\t\t\t\t\t\t\t\t\t<input id=\"challenge-input\" class=\"challenge-input\" type=\"text\" name=\"answer\" placeholder=\"Flag\"/>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-3 form-group key-submit\">\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<button id=\"challenge-submit\" class=\"challenge-submit\" type=\"submit\">\n\t\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"row notification-row\">\n\t\t\t\t\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\t\t\t\t<div id=\"result-notification\" class=\"alert alert-dismissable text-center w-100\"\n\t\t\t\t\t\t\t\t\t role=\"alert\" style=\"display: none;\">\n\t\t\t\t\t\t\t\t\t<strong id=\"result-message\"></strong>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div role=\"tabpanel\" class=\"tab-pane fade\" id=\"solves\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\t\t\t\t<table class=\"table table-striped text-center\">\n\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<td><b>Name</b>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td><b>Date</b>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t<tbody id=\"challenge-solves-names\">\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>"}}
